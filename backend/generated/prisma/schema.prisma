generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  password  String
  image     String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  problems       Problem[]
  submissions    Submission[]
  problemsSolved ProblemSolved[]
  playlists      Playlist[]
}

model Problem {
  id                 String     @id @default(uuid())
  title              String
  description        String
  difficulty         Difficulty
  tags               String[] // Example: ["arrays", "math"]
  userId             String
  examples           Json
  constraints        String
  hints              String?
  editorial          String?
  testcases          Json
  codeSnippets       Json
  referenceSolutions Json
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  // Relationships
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  submissions       Submission[]
  solvedBy          ProblemSolved[]
  problemsPlaylists ProblemInPlaylist[]
}

model Submission {
  id            String  @id @default(uuid())
  userId        String
  problemId     String
  sourceCode    Json
  language      String
  stdin         String?
  stdout        String?
  stderr        String?
  compileOutput String?
  status        String // Accepted , wrong answer
  memory        String?
  time          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  testCases TestCaseResult[]
}

model TestCaseResult {
  id             String @id @default(uuid())
  submissionId   String
  input          String
  output         String
  expectedOutput String
  status         String // Passed, Failed, Error

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
}

model ProblemSolved {
  id        String @id @default(uuid())
  userId    String
  problemId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

model Playlist {
  id          String              @id @default(uuid())
  description String
  userId      String
  name        String
  problems    ProblemInPlaylist[]
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProblemInPlaylist {
  id         String @id @default(uuid())
  playlistId String
  problemId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  problem  Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([playlistId, problemId])
}
